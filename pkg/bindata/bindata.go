// Code generated by go-bindata.
// sources:
// data/cards.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCardsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd6\x4b\x6f\xda\x40\x10\x00\xe0\x3b\xbf\x62\xc5\x39\x52\xfd\xb6\xd3\x5b\x5e\x24\x04\x42\x11\x34\x52\x95\xaa\x42\x6b\x7b\x6b\x36\xd8\xbb\x68\x6d\x0b\x42\xd5\xff\x5e\x19\x4c\x0f\xcd\xcc\x8e\x54\xc5\x87\x56\x8a\x91\x3e\xef\x3c\x76\xe6\xfb\x80\xb1\x5f\x03\xc6\x18\x1b\xaa\xb6\x4a\x85\x19\x7e\x66\xc3\xc0\x39\x3e\x71\x74\xfa\xdf\x1b\x5e\x9c\x7e\xd1\xe8\x8d\x50\xdd\x0f\x1a\xbd\x59\xa5\xe6\xfc\xe7\x4c\xb7\xaa\x31\x6f\xdd\x8b\x6b\xc3\x0f\xb2\x64\xff\xbc\x59\x65\x3a\x17\xc7\xd7\x8b\xe1\x80\xb1\xdf\x17\x38\xea\x7a\x3d\xee\x80\x68\xc6\x01\xf4\x86\x2b\x9e\x73\x14\xbd\xb9\xb2\xa1\xae\x97\xf4\x8f\x9b\x24\xee\x3b\x54\x7d\xfa\x70\xb1\x7b\x82\xa4\x3f\x66\x02\x1e\xb3\xda\x03\xe8\x93\xd8\xcb\x4c\xa3\xe8\xd3\x37\x0a\x75\xce\xa1\x85\x51\xde\x00\xe8\x55\x5b\x37\x46\xe2\x47\xbd\xfa\x4a\xaa\x61\x5f\x46\x01\x5c\x46\x02\x2a\x23\x51\x16\xb2\xad\xf0\x3a\xba\xa3\x54\xcf\x49\x4e\xea\xfb\x94\x76\x6a\xbe\x01\xd4\x5b\xa1\x2a\x6e\x36\xa8\x7a\x3b\x21\xd5\x20\xb2\xa9\x3f\x25\xa0\x8e\xa4\x2a\xb9\xca\x51\x75\x34\x26\xd5\xb0\xcf\xab\x0f\xab\x50\xa3\x8e\x0c\x57\x99\xc0\x51\xb2\x51\xbd\xfe\x76\x70\x23\x38\xc0\x50\x5a\xef\x85\xa9\xb8\x7a\xc3\x03\x4c\xa6\xd5\x8f\xbd\xbe\xa8\x40\x55\x42\xea\xd8\x08\x6b\x80\xc7\xb4\x9a\x58\x1b\x47\x42\x8d\x33\x6e\x78\x89\x9f\x74\x4c\xb6\x4d\x10\xf4\x27\x85\xe3\x5b\xb6\x80\x39\x6d\xf7\xa2\x4a\x75\x6b\x0a\x14\x9e\x3e\x53\x70\xe8\x25\xb6\x6b\x5f\x95\x00\x3c\x13\xcd\x5a\x98\x2e\xca\x35\x2a\xcf\xa6\xa4\x1c\xf7\x72\x0c\xcb\x1a\x92\xb5\xd9\x71\x3c\xce\xb3\x2f\x14\x1a\xf5\x61\x46\xd0\x2d\x94\xdb\xb9\x36\x4d\x5b\x70\x7c\xce\xcd\xc9\xf4\x46\x81\x7f\x62\x2f\x41\xd6\x40\xe9\x5d\xb4\x75\x2d\xb9\x62\x23\x91\x0b\xc3\x1b\xa9\x15\xfa\x01\x0b\x32\xcd\xf1\x79\xd0\xc2\xe7\x16\x35\xf0\x01\xcb\x2d\x97\xb8\x79\xb7\x24\xcd\xd0\xb3\xf5\x51\x0d\x75\xef\x72\x27\x72\x81\xa3\x4b\xb2\x79\xe3\xf3\xfc\x81\x23\x9d\xad\x41\x54\x36\x87\x53\x41\xe3\x43\xfe\x81\x92\x13\x2f\xb2\xed\x32\x45\x0a\xc8\xcf\x4a\x36\x22\x67\x13\xa9\x8a\x5c\xe3\x03\xf0\xfe\x9a\xc0\xc3\xbf\x38\x7c\x53\x16\xe9\x2a\x17\x29\x78\x73\x7d\xd4\x27\x38\x8e\x1f\xd9\xae\x30\x0e\xd5\xf8\x71\xdf\xe0\xa5\x6d\xe3\x20\x4b\xdb\x0d\xad\x8b\x6b\xa6\xa0\x8d\x6e\x2d\x95\x65\xa1\x9b\x91\x23\x22\x08\x6c\x5b\xce\x1a\xda\x37\x1e\xb4\x2a\xd8\xa4\xfb\x07\x73\x1f\xc8\x8d\xc3\xbf\xf4\x6c\xb3\xff\x75\x0b\xb8\x8f\x7c\xcb\xf1\x8e\x7a\x9c\xe3\xa6\x1f\xfa\x8e\xeb\xba\xbe\xef\xfb\x78\x5d\xbf\x66\x50\x61\xff\x3f\xda\x0f\x87\xd0\xba\x31\xab\x03\x38\x96\x76\xec\x45\x70\x6b\x1b\xcf\x5e\xc8\x0b\xc4\xb1\x86\xb8\x2e\xa0\x0b\x44\xaa\x82\x6f\xb5\xc1\x37\xac\xe5\xfd\xd1\x1d\xfc\xf8\x13\x00\x00\xff\xff\x7b\xa7\xfe\x60\x82\x0d\x00\x00")

func dataCardsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataCardsJson,
		"data/cards.json",
	)
}

func dataCardsJson() (*asset, error) {
	bytes, err := dataCardsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cards.json", size: 3458, mode: os.FileMode(493), modTime: time.Unix(1527319497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cards.json": dataCardsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cards.json": &bintree{dataCardsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

